# Directives configured upstream (in the same order)
SecRuleEngine ${CORAZA_RULE_ENGINE}
SecRequestBodyAccess ${CORAZA_REQ_BODY_ACCESS}
SecRequestBodyLimit ${CORAZA_REQ_BODY_LIMIT}
SecRequestBodyNoFilesLimit ${CORAZA_REQ_BODY_NOFILES_LIMIT}
SecRequestBodyLimitAction ${CORAZA_REQ_BODY_LIMIT_ACTION}
# SecRequestBodyJsonDepthLimit ${CORAZA_REQ_BODY_JSON_DEPTH_LIMIT}
# SecArgumentsLimit ${CORAZA_ARGUMENTS_LIMIT}
SecPcreMatchLimit ${CORAZA_PCRE_MATCH_LIMIT}
SecPcreMatchLimitRecursion ${CORAZA_PCRE_MATCH_LIMIT_RECURSION}
SecResponseBodyAccess ${CORAZA_RESP_BODY_ACCESS}
SecResponseBodyMimeType ${CORAZA_RESP_BODY_MIMETYPE}
SecResponseBodyLimit ${CORAZA_RESP_BODY_LIMIT}
SecResponseBodyLimitAction ${CORAZA_RESP_BODY_LIMIT_ACTION}
SecTmpDir ${CORAZA_TMP_DIR}
SecDataDir ${CORAZA_DATA_DIR}
SecAuditEngine ${CORAZA_AUDIT_ENGINE}
SecAuditLogRelevantStatus "${CORAZA_AUDIT_LOG_RELEVANT_STATUS}"
SecAuditLogParts ${CORAZA_AUDIT_LOG_PARTS}
SecAuditLogType ${CORAZA_AUDIT_LOG_TYPE}
SecAuditLog ${CORAZA_AUDIT_LOG}
SecArgumentSeparator ${CORAZA_ARGUMENT_SEPARATOR}
SecCookieFormat ${CORAZA_COOKIE_FORMAT}
# SecUnicodeMapFile unicode.mapping ${CORAZA_UNICODE_MAPPING}
# SecStatusEngine ${CORAZA_STATUS_ENGINE}

# Additional directives
SecAuditLogFormat ${CORAZA_AUDIT_LOG_FORMAT}
SecAuditLogStorageDir ${CORAZA_AUDIT_STORAGE_DIR}
SecDebugLog ${CORAZA_DEBUG_LOG}
SecDebugLogLevel ${CORAZA_DEBUG_LOGLEVEL}
# SecDisableBackendCompression ${CORAZA_DISABLE_BACKEND_COMPRESSION}
# SecTmpSaveUploadedFiles ${CORAZA_TMP_SAVE_UPLOADED_FILES}
SecUploadDir ${CORAZA_UPLOAD_DIR}
SecUploadFileMode ${CORAZA_UPLOAD_FILE_MODE}
SecUploadKeepFiles ${CORAZA_UPLOAD_KEEP_FILES}

# Rules configured upstream (in the same order)
SecRule REQUEST_HEADERS:Content-Type "^(?:application(?:/soap\+|/)|text/)xml" \
    "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
SecRule REQUEST_HEADERS:Content-Type "^application/json" \
    "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
SecRule &ARGS "@ge 1000" \
    "id:'200007', phase:2,t:none,log,deny,status:400,msg:'Failed to fully parse request body due to large argument count',severity:2"
SecRule REQBODY_ERROR "!@eq 0" \
    "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
    "id:'200003',phase:2,t:none,log,deny,status:400, \
    msg:'Multipart request body failed strict validation: \
    PE %{REQBODY_PROCESSOR_ERROR}, \
    BQ %{MULTIPART_BOUNDARY_QUOTED}, \
    BW %{MULTIPART_BOUNDARY_WHITESPACE}, \
    DB %{MULTIPART_DATA_BEFORE}, \
    DA %{MULTIPART_DATA_AFTER}, \
    HF %{MULTIPART_HEADER_FOLDING}, \
    LF %{MULTIPART_LF_LINE}, \
    SM %{MULTIPART_MISSING_SEMICOLON}, \
    IQ %{MULTIPART_INVALID_QUOTING}, \
    IP %{MULTIPART_INVALID_PART}, \
    IH %{MULTIPART_INVALID_HEADER_FOLDING}, \
    FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'"
SecRule MULTIPART_UNMATCHED_BOUNDARY "@eq 1" \
    "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"

# Additional rules
SecRule REQUEST_HEADERS:Content-Type "^application/[a-z0-9.-]+[+]json" \
    "id:'200006',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"
